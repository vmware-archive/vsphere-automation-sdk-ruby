# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# appliance - The vCenter Server Appliance is a preconfigured Linux-based virtual machine optimized for running vCenter Server and associated services.


require 'spec_helper'
require 'json'

# Unit tests for VSphereAutomation::Appliance::UpdatePendingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UpdatePendingApi' do
  before do
    # run before each test
    @instance = VSphereAutomation::Appliance::UpdatePendingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UpdatePendingApi' do
    it 'should create an instance of UpdatePendingApi' do
      expect(@instance).to be_instance_of(VSphereAutomation::Appliance::UpdatePendingApi)
    end
  end

  # unit tests for get
  # Gets update information
  # @param version Update version
  # @param [Hash] opts the optional parameters
  # @return [ApplianceUpdatePendingResult]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for install
  # Starts operation of installing the appliance update. Will fail is the update is not staged
  # @param version Update version
  # @param appliance_update_pending_install 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'install test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # Checks if new updates are available.
  # @param source_type The {@name SourceType} {@term enumerated type} defines the supported types of sources of updates.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :url specific URL to check at
  # @return [ApplianceUpdatePendingListResult]
  describe 'list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for precheck
  # Runs update precheck
  # @param version Update version
  # @param [Hash] opts the optional parameters
  # @return [ApplianceUpdatePendingPrecheckResult]
  describe 'precheck test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stage
  # Starts staging the appliance update. The updates are searched for in the following order: staged, CDROM, URL
  # @param version Update version
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stage_and_install
  # Starts operation of installing the appliance update. Will stage update if not already staged The updates are searched for in the following order: staged, CDROM, URL
  # @param version Update version
  # @param appliance_update_pending_stage_and_install 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stage_and_install test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate
  # Validates the user provided data before the update installation.
  # @param version Update version
  # @param appliance_update_pending_validate 
  # @param [Hash] opts the optional parameters
  # @return [ApplianceUpdatePendingValidateResult]
  describe 'validate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
