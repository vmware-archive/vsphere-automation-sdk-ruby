# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# content - VMware vSphereÂ® Content Library empowers vSphere Admins to effectively manage VM templates, vApps, ISO images and scripts with ease.


require 'spec_helper'
require 'json'

# Unit tests for VSphereAutomation::Content::LibraryItemUpdatesessionFileApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'LibraryItemUpdatesessionFileApi' do
  before do
    # run before each test
    @instance = VSphereAutomation::Content::LibraryItemUpdatesessionFileApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LibraryItemUpdatesessionFileApi' do
    it 'should create an instance of LibraryItemUpdatesessionFileApi' do
      expect(@instance).to be_instance_of(VSphereAutomation::Content::LibraryItemUpdatesessionFileApi)
    end
  end

  # unit tests for add
  # Requests file content to be changed (either created, or updated). Depending on the source type of the file, this {@term operation} will either return an upload endpoint where the client can push the content, or the server will pull from the provided source endpoint. If a file with the same name already exists in this session, this {@term operation} will be used to update the content of the existing file. &lt;p&gt; When importing a file directly from storage, where the source endpoint is a file or datastore URI, you will need to have the ContentLibrary.ReadStorage privilege on the library item. If the file is located in the same directory as the library storage backing folder, the server will move the file instead of copying it, thereby allowing instantaneous import of files for efficient backup and restore scenarios. In all other cases, a copy is performed rather than a move.
  # @param update_session_id Identifier of the update session to be modified.
  # @param content_library_item_updatesession_file_add 
  # @param [Hash] opts the optional parameters
  # @return [ContentLibraryItemUpdatesessionFileAddResult]
  describe 'add test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Retrieves information about a specific file in the snapshot of the library item at the time when the update session was created.
  # @param update_session_id Identifier of the update session.
  # @param content_library_item_updatesession_file_get 
  # @param [Hash] opts the optional parameters
  # @return [ContentLibraryItemUpdatesessionFileResult]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # Lists all files in the library item associated with the update session.
  # @param update_session_id Identifier of the update session.
  # @param [Hash] opts the optional parameters
  # @return [ContentLibraryItemUpdatesessionFileListResult]
  describe 'list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove
  # Requests a file to be removed. The file will only be effectively removed when the update session is completed.
  # @param update_session_id Identifier of the update session.
  # @param content_library_item_updatesession_file_remove 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate
  # Validates the files in the update session with the referenced identifier and ensures all necessary files are received. In the case where a file is missing, this {@term operation} will return its name in the {@link ValidationResult#missingFiles} set. The user can add the missing files and try re-validating. For other type of errors, {@link ValidationResult#invalidFiles} will contain the list of invalid files.
  # @param update_session_id Identifier of the update session to validate.
  # @param [Hash] opts the optional parameters
  # @return [ContentLibraryItemUpdatesessionFileValidateResult]
  describe 'validate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
