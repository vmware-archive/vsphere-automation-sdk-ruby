# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# cis - No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)


require 'uri'

module VSphereAutomation
  module CIS
  class TaggingCategoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds the {@param.name usedByEntity} to the {@link CategoryModel#usedBy} subscribers {@term set} for the specified category. If the {@param.name usedByEntity} is already in the {@term set}, then this becomes an idempotent no-op. To invoke this {@term operation}, you need the modify {@link CategoryModel#usedBy} privilege on the category.
    # @param category_id The identifier of the input category.
    # @param cis_tagging_category_add_to_used_by 
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil]
    def add_to_used_by(category_id, cis_tagging_category_add_to_used_by, opts = {})
      add_to_used_by_with_http_info(category_id, cis_tagging_category_add_to_used_by, opts)
      nil
    end

    # Adds the {@param.name usedByEntity} to the {@link CategoryModel#usedBy} subscribers {@term set} for the specified category. If the {@param.name usedByEntity} is already in the {@term set}, then this becomes an idempotent no-op. To invoke this {@term operation}, you need the modify {@link CategoryModel#usedBy} privilege on the category.
    # @api private
    # @param category_id The identifier of the input category.
    # @param cis_tagging_category_add_to_used_by 
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_to_used_by_with_http_info(category_id, cis_tagging_category_add_to_used_by, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.add_to_used_by ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.add_to_used_by"
      end
      # verify the required parameter 'cis_tagging_category_add_to_used_by' is set
      if @api_client.config.client_side_validation && cis_tagging_category_add_to_used_by.nil?
        fail ArgumentError, "Missing the required parameter 'cis_tagging_category_add_to_used_by' when calling TaggingCategoryApi.add_to_used_by"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}?~action=add-to-used-by'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cis_tagging_category_add_to_used_by)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#add_to_used_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a category. To invoke this {@term operation}, you need the create category privilege.
    # @param cis_tagging_category_create 
    # @param [Hash] opts the optional parameters
    # @return [CisTaggingCategoryCreateResult|VapiStdErrorsInvalidArgumentError|VapiStdErrorsUnauthorizedError|]
    def create(cis_tagging_category_create, opts = {})
      data, _status_code, _headers = create_with_http_info(cis_tagging_category_create, opts)
      data
    end

    # Creates a category. To invoke this {@term operation}, you need the create category privilege.
    # @api private
    # @param cis_tagging_category_create 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CisTaggingCategoryCreateResult|VapiStdErrorsInvalidArgumentError|VapiStdErrorsUnauthorizedError|, Fixnum, Hash)>]  data, response status code and response headers
    def create_with_http_info(cis_tagging_category_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.create ...'
      end
      # verify the required parameter 'cis_tagging_category_create' is set
      if @api_client.config.client_side_validation && cis_tagging_category_create.nil?
        fail ArgumentError, "Missing the required parameter 'cis_tagging_category_create' when calling TaggingCategoryApi.create"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cis_tagging_category_create)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'CIS::CisTaggingCategoryCreateResult',
	  '400' => 'CIS::VapiStdErrorsInvalidArgumentError',
	  '403' => 'CIS::VapiStdErrorsUnauthorizedError',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an existing category. To invoke this {@term operation}, you need the delete privilege on the category.
    # @param category_id The identifier of category to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil]
    def delete(category_id, opts = {})
      delete_with_http_info(category_id, opts)
      nil
    end

    # Deletes an existing category. To invoke this {@term operation}, you need the delete privilege on the category.
    # @api private
    # @param category_id The identifier of category to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.delete ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.delete"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetches the category information for the given category identifier. In order to view the category information, you need the read privilege on the category.
    # @param category_id The identifier of the input category.
    # @param [Hash] opts the optional parameters
    # @return [CisTaggingCategoryResult|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|]
    def get(category_id, opts = {})
      data, _status_code, _headers = get_with_http_info(category_id, opts)
      data
    end

    # Fetches the category information for the given category identifier. In order to view the category information, you need the read privilege on the category.
    # @api private
    # @param category_id The identifier of the input category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CisTaggingCategoryResult|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|, Fixnum, Hash)>]  data, response status code and response headers
    def get_with_http_info(category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.get ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.get"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'CIS::CisTaggingCategoryResult',
	  '403' => 'CIS::VapiStdErrorsUnauthorizedError',
	  '404' => 'CIS::VapiStdErrorsNotFoundError',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enumerates the categories in the system. To invoke this {@term operation}, you need the read privilege on the individual categories. The {@term list} will only contain those categories for which you have read privileges.
    # @param [Hash] opts the optional parameters
    # @return [CisTaggingCategoryListResult|]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # Enumerates the categories in the system. To invoke this {@term operation}, you need the read privilege on the individual categories. The {@term list} will only contain those categories for which you have read privileges.
    # @api private
    # @param [Hash] opts the optional parameters
    # @return [Array<(CisTaggingCategoryListResult|, Fixnum, Hash)>]  data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.list ...'
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'CIS::CisTaggingCategoryListResult',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enumerates all categories for which the {@param.name usedByEntity} is part of the {@link CategoryModel#usedBy} subscribers {@term set}. To invoke this {@term operation}, you need the read privilege on the individual categories.
    # @param cis_tagging_category_list_used_categories 
    # @param [Hash] opts the optional parameters
    # @return [CisTaggingCategoryListUsedCategoriesResult|]
    def list_used_categories(cis_tagging_category_list_used_categories, opts = {})
      data, _status_code, _headers = list_used_categories_with_http_info(cis_tagging_category_list_used_categories, opts)
      data
    end

    # Enumerates all categories for which the {@param.name usedByEntity} is part of the {@link CategoryModel#usedBy} subscribers {@term set}. To invoke this {@term operation}, you need the read privilege on the individual categories.
    # @api private
    # @param cis_tagging_category_list_used_categories 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CisTaggingCategoryListUsedCategoriesResult|, Fixnum, Hash)>]  data, response status code and response headers
    def list_used_categories_with_http_info(cis_tagging_category_list_used_categories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.list_used_categories ...'
      end
      # verify the required parameter 'cis_tagging_category_list_used_categories' is set
      if @api_client.config.client_side_validation && cis_tagging_category_list_used_categories.nil?
        fail ArgumentError, "Missing the required parameter 'cis_tagging_category_list_used_categories' when calling TaggingCategoryApi.list_used_categories"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category?~action=list-used-categories'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cis_tagging_category_list_used_categories)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'CIS::CisTaggingCategoryListUsedCategoriesResult',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#list_used_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes the {@param.name usedByEntity} from the {@link CategoryModel#usedBy} subscribers {@term set}. If the {@param.name usedByEntity} is not using this category, then this becomes a no-op. To invoke this {@term operation}, you need the modify {@link CategoryModel#usedBy} privilege on the category.
    # @param category_id The identifier of the input category.
    # @param cis_tagging_category_remove_from_used_by 
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil]
    def remove_from_used_by(category_id, cis_tagging_category_remove_from_used_by, opts = {})
      remove_from_used_by_with_http_info(category_id, cis_tagging_category_remove_from_used_by, opts)
      nil
    end

    # Removes the {@param.name usedByEntity} from the {@link CategoryModel#usedBy} subscribers {@term set}. If the {@param.name usedByEntity} is not using this category, then this becomes a no-op. To invoke this {@term operation}, you need the modify {@link CategoryModel#usedBy} privilege on the category.
    # @api private
    # @param category_id The identifier of the input category.
    # @param cis_tagging_category_remove_from_used_by 
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_from_used_by_with_http_info(category_id, cis_tagging_category_remove_from_used_by, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.remove_from_used_by ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.remove_from_used_by"
      end
      # verify the required parameter 'cis_tagging_category_remove_from_used_by' is set
      if @api_client.config.client_side_validation && cis_tagging_category_remove_from_used_by.nil?
        fail ArgumentError, "Missing the required parameter 'cis_tagging_category_remove_from_used_by' when calling TaggingCategoryApi.remove_from_used_by"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}?~action=remove-from-used-by'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cis_tagging_category_remove_from_used_by)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#remove_from_used_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revokes all propagating permissions on the given category. You should then attach a direct permission with tagging privileges on the given category. To invoke this {@term operation}, you need category related privileges (direct or propagating) on the concerned category.
    # @param category_id The identifier of the input category.
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil]
    def revoke_propagating_permissions(category_id, opts = {})
      revoke_propagating_permissions_with_http_info(category_id, opts)
      nil
    end

    # Revokes all propagating permissions on the given category. You should then attach a direct permission with tagging privileges on the given category. To invoke this {@term operation}, you need category related privileges (direct or propagating) on the concerned category.
    # @api private
    # @param category_id The identifier of the input category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def revoke_propagating_permissions_with_http_info(category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.revoke_propagating_permissions ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.revoke_propagating_permissions"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}?~action=revoke-propagating-permissions'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#revoke_propagating_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing category. To invoke this {@term operation}, you need the edit privilege on the category.
    # @param category_id The identifier of the category to be updated.
    # @param cis_tagging_category_update 
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsInvalidArgumentError|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil]
    def update(category_id, cis_tagging_category_update, opts = {})
      update_with_http_info(category_id, cis_tagging_category_update, opts)
      nil
    end

    # Updates an existing category. To invoke this {@term operation}, you need the edit privilege on the category.
    # @api private
    # @param category_id The identifier of the category to be updated.
    # @param cis_tagging_category_update 
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsInvalidArgumentError|VapiStdErrorsUnauthorizedError|VapiStdErrorsNotFoundError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_with_http_info(category_id, cis_tagging_category_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaggingCategoryApi.update ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling TaggingCategoryApi.update"
      end
      # verify the required parameter 'cis_tagging_category_update' is set
      if @api_client.config.client_side_validation && cis_tagging_category_update.nil?
        fail ArgumentError, "Missing the required parameter 'cis_tagging_category_update' when calling TaggingCategoryApi.update"
      end
      # resource path
      local_var_path = '/com/vmware/cis/tagging/category/id:{category_id}'.sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cis_tagging_category_update)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaggingCategoryApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
  end
end
